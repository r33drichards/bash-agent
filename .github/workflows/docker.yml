name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: wholelottahoopla

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - flake: streamLayered
            flake_image: bash-agent
            docker_image: agent
          - flake: agent-with-nodejs
            flake_image: agent-with-nodejs
            docker_image: agent-nodejs
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Nix
        uses: DeterminateSystems/nix-installer-action@main

      # Add Nix store cache restore step
      - name: Restore Nix store cache
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: wholelottahoopla
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, load, tag, and push Docker image
        run: |
          nix build .#${{ matrix.flake }}
          ./result | docker load
          docker tag ${{ matrix.flake_image }}:latest ${{ env.IMAGE_NAME }}/${{ matrix.docker_image }}:`git rev-parse HEAD`
          docker push ${{ env.IMAGE_NAME }}/${{ matrix.docker_image }}:`git rev-parse HEAD`
          docker tag ${{ matrix.docker_image }}:latest ${{ env.IMAGE_NAME }}/${{ matrix.docker_image }}:latest
          docker push ${{ env.IMAGE_NAME }}/${{ matrix.docker_image }}:latest

      # Save Nix store cache after build
      - name: Save Nix store cache
        if: always()
        uses: actions/cache@v4
        with:
          path: /nix/store
          key: nix-store-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          restore-keys: |
            nix-store-${{ runner.os }}-

